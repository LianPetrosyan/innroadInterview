{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Liana\\\\Desktop\\\\innroadInterview\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { Button, Divider, Layout, Typography } from 'antd';\nimport { useEffect, useMemo, useState } from 'react';\nimport * as api from './lib/api';\nimport AddPost from './lib/AddPost';\nimport PostsTable from './lib/PostsTable';\nimport useUuid from './useUuid';\nimport axios from 'axios'; // YOU CANNOT CHANGE ANY COMPONENT INSIDE LIB FOLDER, JUST THIS ONE\n// Before to start, please check the code inside lib folder just to get familiar with it\n// With the minimum re-renders and not adding new useState, please do:\n//  V   1. Fetch Users & pass it to AddPost sorted by name ascending \n//  V   2. Fetch Posts & pass it to PostsTable (fulfill the table)\n//  V   2.1. Fetch post and users must happen in parallel\n//  V   3. Use Sort button to toggle sort order on post by users' name\n//  V   4. Receive new entries from AddPost and add them to PostsTable\n// 5. BONUS: Make the alert only appear once after clicking on the element\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [users, setUsers] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [sortOrder, setSortOrder] = useState('asc'); // ONLY MAKE YOUR CHANGES HERE\n\n  const records = posts;\n\n  const handleNewPost = async newPost => {\n    axios.post('https://jsonplaceholder.typicode.com/posts', {\n      userId: newPost.userId,\n      title: newPost.title,\n      body: newPost.body,\n      id: newPost.id,\n      userName: getUserNameById(newPost.userId, users)\n    }).then(response => {\n      setPosts([...posts, response.data]);\n      const unSorted = [...posts, response.data];\n      const sorted = sortOrder === \"asc\" ? unSorted.slice().sort((a, b) => a.userName.localeCompare(b.userName)) : unSorted.slice().sort((a, b) => b.userName.localeCompare(a.userName));\n      setPosts(sorted);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  useEffect(() => {\n    Promise.all([api.fetchUsers(), api.fetchPosts()]).then(_ref => {\n      let [users, posts] = _ref;\n      setUsers(users.sort((a, b) => a.name.localeCompare(b.name)));\n      posts.forEach(el => el.userName = getUserNameById(el.userId, users));\n      setPosts(posts);\n      setSortOrder(sortOrder);\n    });\n  }, []);\n\n  const handleSortClick = () => {\n    const sorted = sortOrder === \"asc\" ? posts.slice().sort((a, b) => a.userName.localeCompare(b.userName)) : posts.slice().sort((a, b) => b.userName.localeCompare(a.userName));\n    setPosts(sorted);\n    setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n  };\n\n  const getUserNameById = (userId, users) => {\n    let user = users.find(user => user.id === userId);\n    return user.username;\n  }; // FINISH YOUR CHANGES HERE\n  // ---------------------------------------------------------------\n  // DONT REMOVE THIS LINE, THIS IS FOR step 5, BONUS\n\n\n  const [uuid, handleRecordsChange] = useUuid();\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    children: /*#__PURE__*/_jsxDEV(Layout.Content, {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(Typography.Title, {\n        children: [\"innRoad Interview\", /*#__PURE__*/_jsxDEV(\"small\", {\n          id: \"uuid\",\n          className: \"records\",\n          children: [\" (Last uiid: \", uuid, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AddPost, {\n        users: users,\n        onSubmit: handleNewPost\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSortClick,\n        className: \"sortButton\",\n        children: [\"Sorting Posts: \", sortOrder === 'asc' ? 'Ascending' : 'Descending']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PostsTable, {\n        records: records,\n        onRecordsChange: handleRecordsChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"5E15WuwfIOb66Fnw6OGk8rbC2zg=\", false, function () {\n  return [useUuid];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Button","Divider","Layout","Typography","useEffect","useMemo","useState","api","AddPost","PostsTable","useUuid","axios","App","users","setUsers","posts","setPosts","sortOrder","setSortOrder","records","handleNewPost","newPost","post","userId","title","body","id","userName","getUserNameById","then","response","data","unSorted","sorted","slice","sort","a","b","localeCompare","catch","error","console","log","Promise","all","fetchUsers","fetchPosts","name","forEach","el","handleSortClick","user","find","username","uuid","handleRecordsChange"],"sources":["C:/Users/Liana/Desktop/innroadInterview/src/App.js"],"sourcesContent":["import './App.css';\nimport 'antd/dist/antd.css';\nimport { Button, Divider, Layout, Typography } from 'antd';\nimport { useEffect, useMemo, useState } from 'react';\nimport * as api from './lib/api';\nimport AddPost from './lib/AddPost';\nimport PostsTable from './lib/PostsTable';\nimport useUuid from './useUuid';\nimport axios from 'axios';\n\n// YOU CANNOT CHANGE ANY COMPONENT INSIDE LIB FOLDER, JUST THIS ONE\n// Before to start, please check the code inside lib folder just to get familiar with it\n// With the minimum re-renders and not adding new useState, please do:\n//  V   1. Fetch Users & pass it to AddPost sorted by name ascending \n//  V   2. Fetch Posts & pass it to PostsTable (fulfill the table)\n//  V   2.1. Fetch post and users must happen in parallel\n//  V   3. Use Sort button to toggle sort order on post by users' name\n//  V   4. Receive new entries from AddPost and add them to PostsTable\n// 5. BONUS: Make the alert only appear once after clicking on the element\n\nfunction App() {\n\n  const [users, setUsers] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [sortOrder, setSortOrder] = useState('asc');\n\n  // ONLY MAKE YOUR CHANGES HERE\n\n  const records = posts;\n\n  const handleNewPost =  async (newPost) => {\n    axios.post('https://jsonplaceholder.typicode.com/posts', {\n      userId: newPost.userId,\n      title: newPost.title,\n      body: newPost.body,\n      id: newPost.id,\n      userName: getUserNameById(newPost.userId, users)\n    })\n    .then(response => {\n      setPosts([...posts,response.data])\n      const unSorted = ([...posts,response.data])\n      const sorted = sortOrder === \"asc\"\n      ? unSorted.slice().sort((a, b) => a.userName.localeCompare(b.userName))\n      : unSorted.slice().sort((a, b) => b.userName.localeCompare(a.userName))\n    setPosts(sorted)\n    })\n    .catch(error => {\n      console.log(error);\n    });\n  }\n\n  useEffect(()=>{\n    Promise.all([api.fetchUsers(), api.fetchPosts()])\n    .then(([users, posts]) => {\n      setUsers(users.sort((a, b) => a.name.localeCompare(b.name)))\n      posts.forEach(el => el.userName = getUserNameById(el.userId, users))\n      setPosts(posts)\n      setSortOrder(sortOrder)\n    });\n  },[])\n\n  const handleSortClick = () => {\n    const sorted = sortOrder === \"asc\"\n      ? posts.slice().sort((a, b) => a.userName.localeCompare(b.userName))\n      : posts.slice().sort((a, b) => b.userName.localeCompare(a.userName))\n    setPosts(sorted)\n    setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\")\n  }\n\n  const getUserNameById = (userId, users) => {\n    let user = users.find( user => user.id === userId)\n    return user.username\n  }\n\n  // FINISH YOUR CHANGES HERE\n\n  // ---------------------------------------------------------------\n\n  // DONT REMOVE THIS LINE, THIS IS FOR step 5, BONUS\n  const [uuid, handleRecordsChange] = useUuid();\n\n  return (\n    <Layout>\n      <Layout.Content className=\"content\">\n        <Typography.Title>\n          innRoad Interview\n          <small id=\"uuid\" className=\"records\"> (Last uiid: {uuid})</small>\n        </Typography.Title>\n        <AddPost users={users} onSubmit={handleNewPost} />\n        <Divider />\n        <Button onClick={handleSortClick} className=\"sortButton\">\n          Sorting Posts: {sortOrder === 'asc' ? 'Ascending' : 'Descending'}\n        </Button>\n        <PostsTable records={records} onRecordsChange={handleRecordsChange} />\n      </Layout.Content>\n    </Layout>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}