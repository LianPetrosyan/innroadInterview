[{"C:\\Users\\Liana\\Desktop\\innroadInterview\\src\\index.js":"1","C:\\Users\\Liana\\Desktop\\innroadInterview\\src\\App.js":"2","C:\\Users\\Liana\\Desktop\\innroadInterview\\src\\reportWebVitals.js":"3","C:\\Users\\Liana\\Desktop\\innroadInterview\\src\\useUuid.js":"4","C:\\Users\\Liana\\Desktop\\innroadInterview\\src\\lib\\api.js":"5","C:\\Users\\Liana\\Desktop\\innroadInterview\\src\\lib\\AddPost.js":"6","C:\\Users\\Liana\\Desktop\\innroadInterview\\src\\lib\\PostsTable.js":"7"},{"size":535,"mtime":1676698847549,"results":"8","hashOfConfig":"9"},{"size":3889,"mtime":1676727149340,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1676698847502,"results":"11","hashOfConfig":"9"},{"size":398,"mtime":1676698847643,"results":"12","hashOfConfig":"9"},{"size":374,"mtime":1676698847769,"results":"13","hashOfConfig":"9"},{"size":1215,"mtime":1676698847832,"results":"14","hashOfConfig":"9"},{"size":698,"mtime":1676709288593,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9uxn8m",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Liana\\Desktop\\innroadInterview\\src\\index.js",[],[],"C:\\Users\\Liana\\Desktop\\innroadInterview\\src\\App.js",["38","39"],[],"import './App.css';\nimport 'antd/dist/antd.css';\nimport { Button, Divider, Layout, Typography } from 'antd';\nimport { useEffect, useMemo, useState } from 'react';\nimport * as api from './lib/api';\nimport AddPost from './lib/AddPost';\nimport PostsTable from './lib/PostsTable';\nimport useUuid from './useUuid';\nimport axios from 'axios';\n\n// YOU CANNOT CHANGE ANY COMPONENT INSIDE LIB FOLDER, JUST THIS ONE\n// Before to start, please check the code inside lib folder just to get familiar with it\n// With the minimum re-renders and not adding new useState, please do:\n//  V   1. Fetch Users & pass it to AddPost sorted by name ascending \n//  V   2. Fetch Posts & pass it to PostsTable (fulfill the table)\n//  V   2.1. Fetch post and users must happen in parallel\n//  V   3. Use Sort button to toggle sort order on post by users' name\n//  V   4. Receive new entries from AddPost and add them to PostsTable\n// 5. BONUS: Make the alert only appear once after clicking on the element\n\nfunction App() {\n\n  const [users, setUsers] = useState([]);\n  const [posts, setPosts] = useState([]);\n  const [sortOrder, setSortOrder] = useState('asc');\n\n  // ONLY MAKE YOUR CHANGES HERE\n\n  const records = posts;\n\n  const handleNewPost = (post) => {\n    const newPost = {\n        userId: post.userId,\n        title: post.title,\n        body: post.body,\n        id: post.id,\n        userName: getUserNameById(post.userId, users)\n      }\n    // axios.post('https://jsonplaceholder.typicode.com/posts', {\n    //   userId: newPost.userId,\n    //   title: newPost.title,\n    //   body: newPost.body,\n    //   id: newPost.id,\n    //   userName: getUserNameById(newPost.userId, users)\n    // })\n    // .then(response => {\n\n       let index = posts.findIndex(el => el.userId === post.userId)\n\n       const newPosts = [...posts]\n       newPosts.splice(index, 0, newPost)\n\n      setPosts(newPosts)\n\n      console.log(posts)\n\n      \n\n    //   const unSorted = ([...posts,response.data])\n    //   const sorted = sortOrder === \"asc\"\n    //   ? unSorted.slice().sort((a, b) => a.userName.localeCompare(b.userName))\n    //   : unSorted.slice().sort((a, b) => b.userName.localeCompare(a.userName))\n    // setPosts(sorted)\n    // })\n    // .catch(error => {\n    //   console.log(error);\n    // });\n  }\n\n  useEffect(()=>{\n    Promise.all([api.fetchUsers(), api.fetchPosts()])\n    .then(([users, posts]) => {\n      setUsers(users.sort((a, b) => a.name.localeCompare(b.name)))\n      const obj = {\n        \n      }\n      users.forEach(el=> obj[el.id] = el.username)\n      console.log(obj)\n      posts.forEach(el => el.userName = obj[el.userId])\n      setPosts(posts)\n    });\n  },[])\n\n  const handleSortClick = () => {\n    const sorted = sortOrder === \"asc\"\n      ? [...posts].sort((a, b) => a.userName.localeCompare(b.userName))\n      : [...posts].sort((a, b) => b.userName.localeCompare(a.userName))\n    setPosts(sorted)\n    setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\")\n  }\n\n  const getUserNameById = (userId, users) => {\n    let user = users.find( user => user.id === userId)\n    return user.username\n  }\n\n  // FINISH YOUR CHANGES HERE\n\n  // ---------------------------------------------------------------\n\n  // DONT REMOVE THIS LINE, THIS IS FOR step 5, BONUS\n  const [uuid, handleRecordsChange] = useUuid();\n\n  return (\n    <Layout>\n      <Layout.Content className=\"content\">\n        <Typography.Title>\n          innRoad Interview\n          <small id=\"uuid\" className=\"records\"> (Last uiid: {uuid})</small>\n        </Typography.Title>\n        <AddPost users={users} onSubmit={handleNewPost} />\n        <Divider />\n        <Button onClick={handleSortClick} className=\"sortButton\">\n          Sorting Posts: {sortOrder === 'asc' ? 'Ascending' : 'Descending'}\n        </Button>\n        <PostsTable records={records} onRecordsChange={handleRecordsChange} />\n      </Layout.Content>\n    </Layout>\n  );\n}\n\nexport default App;\n","C:\\Users\\Liana\\Desktop\\innroadInterview\\src\\reportWebVitals.js",[],[],"C:\\Users\\Liana\\Desktop\\innroadInterview\\src\\useUuid.js",["40"],[],"C:\\Users\\Liana\\Desktop\\innroadInterview\\src\\lib\\api.js",[],[],"C:\\Users\\Liana\\Desktop\\innroadInterview\\src\\lib\\AddPost.js",[],[],"C:\\Users\\Liana\\Desktop\\innroadInterview\\src\\lib\\PostsTable.js",[],[],{"ruleId":"41","severity":1,"message":"42","line":4,"column":21,"nodeType":"43","messageId":"44","endLine":4,"endColumn":28},{"ruleId":"41","severity":1,"message":"45","line":9,"column":8,"nodeType":"43","messageId":"44","endLine":9,"endColumn":13},{"ruleId":"46","severity":1,"message":"47","line":3,"column":1,"nodeType":"48","endLine":14,"endColumn":3},"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'axios' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration"]